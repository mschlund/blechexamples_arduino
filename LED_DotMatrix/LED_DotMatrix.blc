@[CConst (binding = "MILLIS_PER_TICK", header = "env.h")]
extern const MILLIS_PER_TICK: nat32

const LEN: nat8 = 8
const NUM_DIGITS : nat8 = 10

// digits drawn with the matrix2bytes-tool
param digits_large: [NUM_DIGITS][LEN] nat8 = {
  {0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18}, // 0
  {0x18, 0x28, 0x48, 0x8, 0x8, 0x8, 0x8, 0x3e},     // 1
  {0x1c, 0x24, 0x44, 0x8, 0x10, 0x20, 0x7c, 0x0},   // 2
  {0x38, 0x44, 0x4, 0x3c, 0x38, 0x4, 0x44, 0x38},   // 3
  {0x48, 0x48, 0x48, 0x48, 0x78, 0x8, 0x8, 0x8},    // 4
  {0x3e, 0x20, 0x20, 0x3e, 0x3e, 0x2, 0x2, 0x3e},   // 5
  {0x4, 0x8, 0x10, 0x20, 0x38, 0x44, 0x42, 0x3c},   // 6
  {0x7f, 0x2, 0x4, 0x3e, 0x10, 0x20, 0x40, 0x80},   // 7
  {0x3c, 0x42, 0x42, 0x3c, 0x3c, 0x42, 0x42, 0x3c}, // 8
  {0x38, 0x44, 0x44, 0x38, 0x4, 0x4, 0x4, 0x38}     // 9
}

param digits_3x5: [NUM_DIGITS][LEN] nat8 = {
  {0xe0, 0xa0, 0xa0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 0 (3x5)
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x0, 0x0, 0x0}, // 1 (3x5)
  {0xe0, 0x20, 0xe0, 0x80, 0xe0, 0x0, 0x0, 0x0}, // 2 (3x5)
  {0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0}, // 3 (3x5)
  {0xa0, 0xa0, 0xe0, 0x20, 0x20, 0x0, 0x0, 0x0}, // 4 (3x5)
  {0xe0, 0x80, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0}, // 5 (3x5)
  {0xe0, 0x80, 0xe0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 6 (3x5)
  {0xe0, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0}, // 7 (3x5)
  {0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 8 (3x5)
  {0xe0, 0xa0, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0} // 9 (3x5)
}

@[CFunction (binding = "write_msg_to_display($1)", header = "env.h")]
extern function write_msg_to_display(msg: [8]nat8)

@[CFunction (binding = "clear_display()", header = "env.h")]
extern function clear_display ()

// from: https://github.com/frameworklabs/react/blob/master/react.blc
/// Delays the trail for the given period.
activity delay (millis: nat32)
  var ticks = millis / MILLIS_PER_TICK

  if ticks == 0 then
    ticks = 1 // Need to wait at least one tick
  end
  repeat
    ticks = ticks - 1
    await true
  until ticks == 0 end
end

activity print_digits ()
  var i : nat8 = 0
  repeat
    write_msg_to_display(digits_3x5[i])
    i = i +1
    i = i % NUM_DIGITS
    run delay(1000)
    clear_display()
    run delay(1000)
  end
end

@[EntryPoint]
activity Main ()
  repeat
    run print_digits()
  end
end