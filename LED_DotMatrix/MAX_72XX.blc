import ut "utils"

module exposes init, write_msg_to_display, clear_display, print_digits, LEN

@[CFunction (binding = "write_data_to_reg($1, $2)", header = "env.h")]
extern function write_data_to_reg (reg : bits8, state : bits8)

const LEN: nat8 = 8
const NUM_DIGITS : bits8 = 10

struct Display
  var current_state : [8]bits8
end

// digits drawn with the matrix2bytes-tool
param digits_large: [NUM_DIGITS][LEN] bits8 = {
  {0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18}, // 0
  {0x18, 0x28, 0x48, 0x8, 0x8, 0x8, 0x8, 0x3e},     // 1
  {0x1c, 0x24, 0x44, 0x8, 0x10, 0x20, 0x7c, 0x0},   // 2
  {0x38, 0x44, 0x4, 0x3c, 0x38, 0x4, 0x44, 0x38},   // 3
  {0x48, 0x48, 0x48, 0x48, 0x78, 0x8, 0x8, 0x8},    // 4
  {0x3e, 0x20, 0x20, 0x3e, 0x3e, 0x2, 0x2, 0x3e},   // 5
  {0x4, 0x8, 0x10, 0x20, 0x38, 0x44, 0x42, 0x3c},   // 6
  {0x7f, 0x2, 0x4, 0x3e, 0x10, 0x20, 0x40, 0x80},   // 7
  {0x3c, 0x42, 0x42, 0x3c, 0x3c, 0x42, 0x42, 0x3c}, // 8
  {0x38, 0x44, 0x44, 0x38, 0x4, 0x4, 0x4, 0x38}     // 9
}

param digits_3x5: [NUM_DIGITS][LEN] bits8 = {
  {0xe0, 0xa0, 0xa0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 0 (3x5)
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x0, 0x0, 0x0}, // 1 (3x5)
  {0xe0, 0x20, 0xe0, 0x80, 0xe0, 0x0, 0x0, 0x0}, // 2 (3x5)
  {0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0}, // 3 (3x5)
  {0xa0, 0xa0, 0xe0, 0x20, 0x20, 0x0, 0x0, 0x0}, // 4 (3x5)
  {0xe0, 0x80, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0}, // 5 (3x5)
  {0xe0, 0x80, 0xe0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 6 (3x5)
  {0xe0, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0}, // 7 (3x5)
  {0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 8 (3x5)
  {0xe0, 0xa0, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0} // 9 (3x5)
}

function init () returns Display
  return {current_state = {0,0,0,0,0,0,0,0}}
end

function write_row (row : bits8, state : bits8)
  if 0 < row and row < 9 then
    write_data_to_reg(row, state)
  end
end

function write_msg_to_display (msg : [LEN]bits8)
  var row : bits8 = 1
  repeat
    write_row(row, msg[row-1])
    row = row + 1
  until row == 9 end
end

// TODO: argument!
function clear_display ()
  var row : bits8 = 1
  repeat
    write_data_to_reg(row, 0x00)
    row = row + 1
  until row == 9 end
end

function set_intensity(intensity : bits8)
  write_data_to_reg(0x0A, intensity)
end

activity print_digits ()
  var i : bits8 = 0
  repeat
    write_msg_to_display(digits_3x5[i])
    i = i + 1
    i = i % NUM_DIGITS
    run ut.delay(1000)
    clear_display()
    run ut.delay(1000)
  end
end