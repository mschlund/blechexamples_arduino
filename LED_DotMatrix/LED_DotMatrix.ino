#include <Arduino.h>

extern "C" {
  #include "env.h"
  #include "LED_DotMatrix.h"
}

byte digits_full[10][8] = {
  {0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18}, // 0
  {0x18, 0x28, 0x48, 0x8, 0x8, 0x8, 0x8, 0x3e}, // 1
  {0x1c, 0x24, 0x44, 0x8, 0x10, 0x20, 0x7c, 0x0}, // 2
  {0x38, 0x44, 0x4, 0x3c, 0x38, 0x4, 0x44, 0x38}, // 3
  {0x48, 0x48, 0x48, 0x48, 0x78, 0x8, 0x8, 0x8}, // 4
  {0x3e, 0x20, 0x20, 0x3e, 0x3e, 0x2, 0x2, 0x3e}, // 5
  {0x4, 0x8, 0x10, 0x20, 0x38, 0x44, 0x42, 0x3c}, // 6
  {0x7f, 0x2, 0x4, 0x3e, 0x10, 0x20, 0x40, 0x80}, // 7
  {0x3c, 0x42, 0x42, 0x3c, 0x3c, 0x42, 0x42, 0x3c}, // 8
  {0x38, 0x44, 0x44, 0x38, 0x4, 0x4, 0x4, 0x38} // 9
};

byte digits_3x5[10][8] = {
  {0xe0, 0xa0, 0xa0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 0 (3x5)
  {0x40, 0x40, 0x40, 0x40, 0x40, 0x0, 0x0, 0x0}, // 1 (3x5)
  {0xe0, 0x20, 0xe0, 0x80, 0xe0, 0x0, 0x0, 0x0}, // 2 (3x5)
  {0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0}, // 3 (3x5)
  {0xa0, 0xa0, 0xe0, 0x20, 0x20, 0x0, 0x0, 0x0}, // 4 (3x5)
  {0xe0, 0x80, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0}, // 5 (3x5)
  {0xe0, 0x80, 0xe0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 6 (3x5)
  {0xe0, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0}, // 7 (3x5)
  {0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0x0, 0x0, 0x0}, // 8 (3x5)
  {0xe0, 0xa0, 0xe0, 0x20, 0xe0, 0x0, 0x0, 0x0} // 9 (3x5)
};

void setup() {
  Serial.begin(9600);
 
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(CS_PIN, OUTPUT);
  pinMode(DATA_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);

  blc_blech_01LED_DotMatrix01_init();
  
  //wake up (optional?)
  write_data_to_reg(0x0C,0x01);

  // Normal operation (turn off display-test)
  write_data_to_reg(0x0F,0x00);

  // no decode mode
  write_data_to_reg(0x09,0x00);

  // display all "digits"(=rows)
  write_data_to_reg(0x0B,0x07);

  clear_display();

  // lowest intensity
  set_intensity(0x00);
}

void loop() {
  blc_blech_01LED_DotMatrix01_tick();
  delay(MILLIS_PER_TICK);
}

void write_msg_to_display(byte msg[8]) {
  for (byte row=1; row<9; row++) {
    write_row(row, msg[row-1]);
  }
}

void write_row(byte row, byte state) {
  if(0 < row && row < 9) {
    write_data_to_reg(row, state);
  }
}

void clear_display() {
  // register for first row is "1"
  for(int row=1; row<9; row++) {
    write_data_to_reg(row, 0x00);
  }
}

void set_intensity(byte intensity) {
  write_data_to_reg(0x0A, intensity);
}

void write_data_to_reg(byte reg, byte data) {
  // make sure clock is 0
  digitalWrite(CLOCK_PIN, LOW);

  // wake-up peripheral,
  // see https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi, CS is "active low"
  digitalWrite(CS_PIN, LOW);
  shiftOut(DATA_PIN, CLOCK_PIN, MSBFIRST, reg);
  shiftOut(DATA_PIN, CLOCK_PIN, MSBFIRST, data);
  digitalWrite(CS_PIN, HIGH);
}