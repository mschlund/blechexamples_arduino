import ut "utils" 
module exposes read_direction, is_nontrivial, dir_to_index, equals

@[CFunction (binding = "read_X()", header = "env.h")]
extern function read_X () returns bits32

@[CFunction (binding = "read_Y()", header = "env.h")]
extern function read_Y () returns bits32

// directios in the form NWSE
// currently saved as the first 4 bits NWSExxxx, not exported (-> opaque type)
struct direction
  var d: bits8
end

const THRESHOLD_LOWER : bits32 = 212 //512-300
const THRESHOLD_UPPER : bits32 = 812 //512+300

function is_middle (x : bits32) returns bool
  return THRESHOLD_LOWER < x and x < THRESHOLD_UPPER
end

function equals(dir1 : direction, dir2 : direction) returns bool
  return dir1.d == dir2.d
end

function read_direction() returns direction
  let x = read_X()
  let y = read_Y()
  var dir : direction = {d=0}
  dir.d = 0

  if is_middle(x) and y > THRESHOLD_UPPER then
    // ^, North
    dir.d = dir.d | 1
  elseif x < THRESHOLD_LOWER and is_middle(y) then
    // <, West
    dir.d = dir.d | 2
  elseif is_middle(x) and y < THRESHOLD_LOWER then
    // v, South
    dir.d = dir.d | 4
  elseif x > THRESHOLD_UPPER and is_middle(y) then
    // >, East
    dir.d = dir.d | 8
  end

  return dir
end

function is_nontrivial(dir : direction) returns bool
  return dir.d > 0
end

function dir_to_index(dir : direction) returns bits8
  var index : bits8 = -1
  if dir.d & 1 == 1 then
    index = 0
  elseif dir.d & 2 == 2 then
    index = 1
  elseif dir.d & 4 == 4 then
    index = 2
  elseif dir.d & 8 == 8 then
    index = 3
  end
  return index
end